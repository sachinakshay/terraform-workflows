name: Terraform CI/CD Workflow

on:
  workflow_dispatch:
    inputs:
      aws_region:
        description: "AWS Region where resources will be deployed"
        required: true
        default: "us-east-1"
        type: choice
        options:
          - us-east-1
          - us-west-1
          - us-west-2
      terraform_action:
        description: "Choose the Terraform action (apply, destroy)"
        required: true
        default: "apply"
        type: choice
        options:
          - apply
          - destroy
      destroy_vpc:
        description: "Set to true to destroy the VPC"
        required: false
        default: false
        type: choice
        options:
          - true
          - false
      destroy_ec2:
        description: "Set to true to destroy EC2 instance"
        required: false
        default: false
        type: choice
        options:
          - true
          - false
      destroy_s3:
        description: "Set to true to destroy an S3 bucket"
        required: false
        default: false
        type: choice
        options:
          - true
          - false
      destroy_autoscaling:
        description: "Set to true to destroy Autoscaling Group"
        required: false
        default: false
        type: choice
        options:
          - true
          - false
      ami_id:
        description: "AMI ID for EC2 instance and Autoscaling"
        required: true
        default: "ami-0866a3c8686eaeeba"
      instance_type:
        description: "Instance type for EC2 and Autoscaling"
        required: true
        default: "t2.micro"
      subnet_id:
        description: "Subnet ID for EC2 instance"
        required: true
        default: "subnet-00c4a2e995cce6293"
      security_group_id:
        description: "Security Group ID for EC2 instance"
        required: true
        default: "sg-068223c218a9d62ee"
      s3_bucket_name:
        description: "Prefix for S3 bucket name"
        required: true
        default: "example-bucket"


jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0

    - name: Terraform Init
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: terraform init

    - name: Terraform Plan
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        if [ "${{ github.event.inputs.terraform_action }}" == "apply" ]; then
          terraform plan \
            -var="aws_region=${{ github.event.inputs.aws_region }}" \
            -var="create_vpc=${{ github.event.inputs.create_vpc }}" \
            -var="create_ec2=${{ github.event.inputs.create_ec2 }}" \
            -var="create_s3=${{ github.event.inputs.create_s3 }}" \
            -var="create_autoscaling=${{ github.event.inputs.create_autoscaling }}" \
            -var="ami_id=${{ github.event.inputs.ami_id }}" \
            -var="instance_type=${{ github.event.inputs.instance_type }}" \
            -var="subnet_id=${{ github.event.inputs.subnet_id }}" \
            -var="security_group_id=${{ github.event.inputs.security_group_id }}" \
            -var="s3_bucket_name=${{ github.event.inputs.s3_bucket_name }}"
        elif [ "${{ github.event.inputs.terraform_action }}" == "destroy" ]; then
          terraform plan -destroy \
            -var="aws_region=${{ github.event.inputs.aws_region }}" \
            -var="destroy_vpc=${{ github.event.inputs.destroy_vpc }}" \
            -var="destroy_ec2=${{ github.event.inputs.destroy_ec2 }}" \
            -var="destroy_s3=${{ github.event.inputs.destroy_s3 }}" \
            -var="destroy_autoscaling=${{ github.event.inputs.destroy_autoscaling }}" \
            -var="ami_id=${{ github.event.inputs.ami_id }}" \
            -var="instance_type=${{ github.event.inputs.instance_type }}" \
            -var="subnet_id=${{ github.event.inputs.subnet_id }}" \
            -var="security_group_id=${{ github.event.inputs.security_group_id }}" \
            -var="s3_bucket_name=${{ github.event.inputs.s3_bucket_name }}"
        else
          echo "Invalid terraform_action: ${{ github.event.inputs.terraform_action }}. Exiting."
          exit 1
        fi

    - name: Terraform Apply
      if: ${{ github.event.inputs.terraform_action == 'apply' }}
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        terraform apply -auto-approve \
          -var="aws_region=${{ github.event.inputs.aws_region }}" \
          -var="create_vpc=${{ github.event.inputs.create_vpc }}" \
          -var="create_ec2=${{ github.event.inputs.create_ec2 }}" \
          -var="create_s3=${{ github.event.inputs.create_s3 }}" \
          -var="create_autoscaling=${{ github.event.inputs.create_autoscaling }}" \
          -var="ami_id=${{ github.event.inputs.ami_id }}" \
          -var="instance_type=${{ github.event.inputs.instance_type }}" \
          -var="subnet_id=${{ github.event.inputs.subnet_id }}" \
          -var="security_group_id=${{ github.event.inputs.security_group_id }}" \
          -var="s3_bucket_name=${{ github.event.inputs.s3_bucket_name }}"

    - name: Terraform Destroy
      if: ${{ github.event.inputs.terraform_action == 'destroy' }}
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        if [ "${{ github.event.inputs.destroy_vpc }}" == "true" ]; then
          terraform destroy -auto-approve -target=aws_vpc.example_vpc \
            -var="aws_region=${{ github.event.inputs.aws_region }}"
        fi
        if [ "${{ github.event.inputs.destroy_ec2 }}" == "true" ]; then
          terraform destroy -auto-approve -target=aws_instance.example_ec2 \
            -var="aws_region=${{ github.event.inputs.aws_region }}"
        fi
        if [ "${{ github.event.inputs.destroy_s3 }}" == "true" ]; then
          terraform destroy -auto-approve -target=aws_s3_bucket.example_s3 \
            -var="aws_region=${{ github.event.inputs.aws_region }}"
        fi
        if [ "${{ github.event.inputs.destroy_autoscaling }}" == "true" ]; then
          terraform destroy -auto-approve -target=aws_autoscaling_group.example_autoscaling \
            -var="aws_region=${{ github.event.inputs.aws_region }}"
        fi
